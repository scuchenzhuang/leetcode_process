给定一个没有重复数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
 
这道题就是一个裸的搜索，但是这次涉及到了引用复制等等的条件，所以，此时我们使用了
  1.trace[]数组
    a.如果定义了一个全局变量int[] trace,在main函数应该写的是trace=new int[length]
    b.千万不要手贱写成了int
  2.任何一个搜索都可以复原
    a.就是在dfs()完成以后，我们可以把trace变0，同时list可以把之前加入的东西给删掉。
    
code:
class Solution {
    List<List<Integer>> list=new ArrayList<List<Integer>>();
    int[] trace;
    public List<List<Integer>> permute(int[] nums) 
    {
        int len=nums.length;
        if(len==0)
            return null;
        else if(len==1)
        {
            List<Integer> tmp= new ArrayList();
            tmp.add(nums[0]);
            list.add(tmp);
            return list;
        }
        else
        {
            trace=new int[len];
            List<Integer> doing=new ArrayList<Integer>();
            dfs(0,doing,nums);
            return list;
        }
        
    }
    public void dfs(int now,List<Integer> doing,int[] nums)
    {
        if(now == nums.length)
        {
            list.add(new ArrayList<>(doing));
        }
       
        for(int i=0;i<nums.length;i++)
        {
            if(trace[i]==0)
            {
                trace[i]=1;
                doing.add(nums[i]);
                dfs(now+1,doing,nums);
                trace[i]=0;
                doing.remove(doing.size()-1);
                
                
            }
        }
   
        
    }
}
