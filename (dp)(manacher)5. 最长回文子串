给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"


解1:dp,此处dp主要做法： 设定一个boolean数组储存每个dp[i][j]的值表示[i,j]之间是否能成为一个回文字符串
此处dp的转移方程为 一.dp[i][j]=dp[i+1][j-1] && 二.s[i]==s[j]
同时可以观察到如果在出现了一条件下的成立，aba/b的情况，即判断的i与j的差<=2都是属于符合条件的，因此我们可以让二条件变为选择短路

代码如下：
class Solution {
    public String longestPalindrome(String s) {
        int len=s.length();
        if(len==1||len==0)
            return s;
        else 
        {
            int maxlen=1;
            int left=0;
            int right=1;
            boolean[][] dp =new boolean[len][len];
            for(int r=1;r<len;r++)
                for(int l=0;l<r;l++)
                {
                    if ( s.charAt(l) == s.charAt(r) && (r-l<=2 || dp[l+1][r-1])  )
                    
                    {    dp[l][r]=true;
                     if(r-l+1>maxlen)
                    {
                        left=l;
                        right=r+1;
                        maxlen=r-l+1;
                    }
                    }
                }
            return s.substring(left,right);
        }
    }
}

解2:
Manacher算法   Manacher=中心拓展+无需讨论偶数回文串情况。
1.str.replace("","#") // 将字符串切换为由#分隔的字符串
2.length=length*2+1   //字符串变为原来的2n+1,同理求得的回文字符串也是2n+1，换言之，奇数
3.对字符串for循环，中心拓展法，将每个字符向左右扩散，获取以每个字符为中心的回文串最大情况。
代码如下：
class Solution {
    public String longestPalindrome(String s) {
        int len=s.length();
        if(len==0||len==1)
            return s;
        else
        {
            int max=3;
            int l=0;
            int r=3;
            len=len*2+1;
            s=s.replace("","#");
            for(int i=0;i<len;i++)
            {
                int tmp=find(i,s,len);
                if(tmp>max)
                {
                    max=tmp;
                    l=i-tmp/2;
                    r=i+tmp/2+1;
                }
            }
            return s.substring(l,r).replace("#","");
        }
    }
    public int find(int i,String s,int len)
    {
        int tmp=1;
        int l=i-1;
        int r=i+1;
        while(l>=0&&r<=len-1)
        {
            if(s.charAt(l)==s.charAt(r))
            {
                tmp+=2;
                l--;
                r++;
            }
            else
                break;
        }
            return tmp;
        
    }
}





