给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例 1:

输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

输出: true
示例 2:

输入:      1          1
          /           \
         2             2

        [1,2],     [1,null,2]

输出: false
示例 3:

输入:       1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

输出: false

分析：这道题是一个很裸的搜索题，直接在外部设定一个flag来记录，到底是否相同。若出现不同的数字则设定为1，其次是遍历模式是左中右
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int flag=0;
    public boolean isSameTree(TreeNode p, TreeNode q) {
        judge(p,q);
        if(flag==0)
         return true;
        else
            return false;
    }
    public void judge(TreeNode p, TreeNode q)
    {
        if(p!=null&&q!=null)
        {
            if(p.val==q.val)
            {judge(p.left,q.left);
             judge(p.right,q.right);
            }
            else
            {flag=1;
             return;}
        }
        else if(p==null&&q==null)
            return;
        else 
        {
            flag=1;
            return;
        }
    }
}
