给定正整数 K，你需要找出可以被 K 整除的、仅包含数字 1 的最小正整数 N。

返回 N 的长度。如果不存在这样的 N，就返回 -1。

 

示例 1：

输入：1
输出：1
解释：最小的答案是 N = 1，其长度为 1。
示例 2：

输入：2
输出：-1
解释：不存在可被 2 整除的正整数 N 。
示例 3：

输入：3
输出：3
解释：最小的答案是 N = 111，其长度为 3。
 
这道题看似很简单，但是有一个数学证明或者说规律
容易想到，反复乘10加1很快就会超出int能表示的范围。

class Solution {
    public int smallestRepunitDivByK(int K) {
        int len=1;
        int temp=1;
        if(K%2==0||K%5==0)
            return -1;
        if(temp%K==0)
            return len;
        while(true)
        {
            len=len+1;
            temp=temp%K;
            temp=10*temp+1;//此处是核心
            if(temp%K==0)
                break;
        }
        return len;
    }
    
}
总结一下思路就是，1.除了整除2和整除5的数外，其他数字都能找到N111111  2.判断一个数是否为整除，可以先取一次余数，再进行多次变换

