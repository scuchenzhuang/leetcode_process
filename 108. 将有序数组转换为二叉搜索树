将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定有序数组: [-10,-3,0,5,9],

一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5

这道题的做法很明显是一个二分加上搜索，二分的意义在于优先被固定的位置都是中间数
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        int len=nums.length;
        return bisearch(nums,0,len-1);
    }
    public TreeNode bisearch(int[] nums,int low,int high)//LOW起点，high终点，此处注意一下mid决定以后，要注意他的起点和终点。我们设置，起点和终点都是闭区间就可以避免其讨论，也就是从0开始一直到len-1。此处搜索的终结条件，是当low>high的时候将返回。同时二分法是固定套路，也就是确定mid以后，新的起点变成mid+1,新的终点是mid-1。也就满足闭区间讨论，常规套路。
    {
        if(low>high)
            return null;
        int mid=low+(high-low)/2;
        TreeNode root=new TreeNode(nums[mid]);
        root.left=bisearch(nums,low,mid-1);
        root.right=bisearch(nums,mid+1,high);
        return root;
    }
}
