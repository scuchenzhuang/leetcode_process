给你一个链表的头节点 head，请你编写代码，反复删去链表中由 总和 值为 0 的连续节点组成的序列，直到不存在这样的序列为止。

删除完毕后，请你返回最终结果链表的头节点。

 

你可以返回任何满足题目要求的答案。

（注意，下面示例中的所有序列，都是对 ListNode 对象序列化的表示。）

示例 1：

输入：head = [1,2,-3,3,1]
输出：[3,1]
提示：答案 [1,2,1] 也是正确的。
示例 2：

输入：head = [1,2,3,-3,4]
输出：[1,2,4]
示例 3：

输入：head = [1,2,3,-3,-2]
输出：[1]














/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeZeroSumSublists(ListNode head) {
        if(head==null)
            return head;
        //本题的解决办法在于发现一个数列的问题
        //比如            1 2 3 -3 -2 
        //累计和   对应    1 3 6  3  1   我们发现累计和3和3之间可以消灭掉3和-3，而1和1之间的数又可以被消掉，换言之出现相同的累计和就说明他们两个值之间的数可以被消掉
        //类似于 a a+b  a+b-b   就说明a+b   a+b-b对应的数可以被消除掉
        ListNode dummy=new ListNode(0);
        HashMap<Integer,ListNode> map=new HashMap<Integer,ListNode>();
        int sum=0;
        dummy.next=head;
        ListNode cur=dummy;
        while(cur!=null)
        {
            sum+=cur.val;
            map.put(sum,cur);
            cur=cur.next;   //hashmap记录值，会更新值的对应的链表节点
        }
        sum=0;
        cur=dummy;
        while(cur!=null)
        {
            sum+=cur.val;
            cur.next=map.get(sum).next;
            cur=cur.next;     //发现累计和的指向的位置，就可以设定cur的下一个就是指向的位置的下一个
        }
        return dummy.next;
    }
}//本道题建议在纸上算一算推演，就可以得出答案了。
