Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null)
            return null;
        else 
            return mergesort(head);//如果head不是null就开始进行归并排序
    }
    private ListNode mergesort(ListNode head)
    {
        if(head.next==null)
            return head;
        ListNode fast=head,slow=head,pre=head;//此处是快慢指针，我们使用快慢指针，让slow得到中间的项，让pre得到的是slow前的指针
        while(fast!=null&&fast.next!=null)
        {
            pre=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        pre.next=null;//此处将链表分成两部分，防止尾部指针形成环
        ListNode l=mergesort(head);//获取左半部分归并排序结果
        ListNode r=mergesort(slow);
        return merge(l,r);//排序
    }
   public ListNode merge(ListNode l,ListNode r)
   {
       ListNode dummy=new ListNode(0);
       ListNode tmp=dummy;
       while(l!=null&&r!=null)
       {
           if(l.val<r.val)
           {
               tmp.next=l;
               tmp=tmp.next;
               l=l.next;
           }
           else
           {
               tmp.next=r;
               tmp=tmp.next;
               r=r.next;
           }
       }//升序排列
       if(l!=null)
           tmp.next=l;
       if(r!=null)
           tmp.next=r;
       return dummy.next;
   }
}
