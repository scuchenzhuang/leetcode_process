给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

Algorithm listed below:
解题方案
思路

标签：数组遍历
首先对数组进行排序，排序后固定一个数 
n
u
m
s
[
i
]
nums[i]，再使用左右指针指向 
n
u
m
s
[
i
]
nums[i]后面的两端，数字分别为 
n
u
m
s
[
L
]
nums[L] 和 
n
u
m
s
[
R
]
nums[R]，计算三个数的和 
s
u
m
sum 判断是否满足为 
0
0，满足则添加进结果集
如果 
n
u
m
s
[
i
]
nums[i]大于 
0
0，则三数之和必然无法等于 
0
0，结束循环
如果 
n
u
m
s
[
i
]
nums[i] == 
n
u
m
s
[
i
−
1
]
nums[i−1]，则说明该数字重复，会导致结果重复，所以应该跳过
当 
s
u
m
sum == 
0
0 时，
n
u
m
s
[
L
]
nums[L] == 
n
u
m
s
[
L
+
1
]
nums[L+1] 则会导致结果重复，应该跳过，
L
+
+
L++
当 
s
u
m
sum == 
0
0 时，
n
u
m
s
[
R
]
nums[R] == 
n
u
m
s
[
R
−
1
]
nums[R−1] 则会导致结果重复，应该跳过，
R
−
−
R−−
时间复杂度：
O
(
n
2
)
O(n 
2
 )，
n
n 为数组长度


code:
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> a =new ArrayList();
        int len=nums.length;
        if(len<3)
            return a;
        Arrays.sort(nums);
        for(int i=0;i<len;i++)
        {
            
            if(i>0&&nums[i]==nums[i-1])
                continue;
            if(nums[i]>0) break;
            int sum=0;
            int L=i+1,R=len-1;
            while(L<R)
            {
                sum=nums[L]+nums[R]+nums[i];
                if(sum>0)
                    R--;
                else if(sum<0)
                    L++;
                else
                {
                    
                    a.add(Arrays.asList(nums[i],nums[L],nums[R]));
                    while(L<R&&nums[L]==nums[L+1])
                        L++;
                    while(L<R&&nums[R]==nums[R-1])
                        R--;
                    L++;
                    R--;
                    
                }
            }
        }
        return a;
    }
   
}
