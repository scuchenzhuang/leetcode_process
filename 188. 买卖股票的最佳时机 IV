关于股票的6道dp题，看着答案，然后自己写着写出来了
三维数组解dp题太太太厉害了！
具体参考这个页面：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/
code:
class Solution {
    public int maxProfit(int k,int[] prices) {
        int len=prices.length;
        int temp=k;
        if(len==0||len==1)
            return 0;
        if(temp>len/2)
            return maxProfit_k_inf(prices);
        int[][][] dp=new int[len][2][temp+1];//second=state third=transaction
        for(k=0;k<=temp;k++)
        {
            dp[0][0][k]=0;
            dp[0][1][k]=-prices[0];
        }
        
        for(k=0;k<=temp;k++)
        for(int i=1;i<len;i++)
        {
            dp[i][0][k]=dp[i-1][0][k];
           if(k>=1)
            dp[i][0][k]=Math.max(dp[i-1][1][k-1]+prices[i],dp[i-1][0][k]);
           else
             dp[i][0][k]=dp[i-1][0][k];
            dp[i][1][k]=Math.max(dp[i-1][0][k]-prices[i],dp[i-1][1][k]);
            dp[i][1][k]=Math.max(dp[i-1][0][k]-prices[i],dp[i-1][1][k]);
        }
        return dp[len-1][0][temp];
        
        
    }
    int maxProfit_k_inf(int[] prices) {
    int n = prices.length;
    int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
    for (int i = 0; i < n; i++) {
        int temp = dp_i_0;
        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);
    }
    return dp_i_0;
}

}


关于二维数组求行列
a[][]
求行数：int len=a.length;
求列数：int lie=a[0].length;
