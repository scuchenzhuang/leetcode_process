现在你总共有 n 门课需要选，记为 0 到 n-1。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]

给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？

示例 1:

输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。
示例 2:

输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。

分析：首先，这道题其实是判断的是是否存在一个有向图里是否有环。因为如果出现了环那么就会出现1<2<1的情况，也就是false。
所以这道题实际上是一个简单的拓扑排序，关于拓扑排序的方法，其实就是每一轮消失掉入度为0的元素，最后消灭完了以后对照一下看一下有没有
剩余的元素，如果有元素始终都消灭不完，那么就说明出现了环。
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(numCourses==0)
            return false;
        else if(numCourses==1)
            return true;
        else
        {
            int len = numCourses;
            int[] indegree=new int[len];
            LinkedList<Integer> queue=new LinkedList<Integer>();//linkedlist可以将元素放置在最后也可以放置在最前
            for(int[] p : prerequisites)
            {
                indegree[p[0]]++;//记录入度
            }
            for(int i=0;i<len;i++)
            {
                if(indegree[i]==0)
                    queue.addLast(i);
            }
            while(!queue.isEmpty())
            {
                Integer num=queue.removeFirst();
                numCourses--;
                for(int[] p : prerequisites)//此种代码要熟悉，此处的含义是 p[] = pre....es的某个数组元素，这种写法比较方便
                {
                    if(p[1]==(num))
                    {
                        indegree[p[0]]--;
                        if(indegree[p[0]]==0)
                            queue.addLast(p[0]);
                    }
                        
                }
            }
            return numCourses==0 ? true : false;
            
            
        }
            
        
    }
}
