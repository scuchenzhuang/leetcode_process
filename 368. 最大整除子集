给出一个由无重复的正整数组成的集合，找出其中最大的整除子集，子集中任意一对 (Si，Sj) 都要满足：Si % Sj = 0 或 Sj % Si = 0。

如果有多个目标子集，返回其中任何一个均可。

 

示例 1:

输入: [1,2,3]
输出: [1,2] (当然, [1,3] 也正确)
示例 2:

输入: [1,2,4,8]
输出: [1,2,4,8]

这道题是一个简单dp，虽然看了别人的思路，但是很有成就感。首先本道题的含义大概是
1.y%x==0 那么，任何x%a==0|x%b==0    y%a/y%b all == 0
2.所以我们用dp数组来记录前面的数据的整除个数，然后用pre数组来记录被整除的前面一个数字也就是思路:
排序
动态规划找到最长的整除子集,但是要记录前一个数位置
举个例子 [1,2,3]

我们用dp[i]记录到i最长的整除子集长度,用pre[i]记录到i前面一个数的位置

很明显dp[0] = 1 ,pre[0] = -1

当i = 1,有nums[1] % nums[0] == 0可以整除,如果dp[0] + 1 > dp[1],那么pre[1] = 0,dp[1] = 2

当i = 2,也有有nums[2] % nums[0] == 0可以整除,那么我们判断i=2之前可以整除的,有nums[2] % nums[1] != 0,所以有nums[2] % nums[0] == 0能整除,有dp[0] + 1 > dp[2],那么pre[2] = 0,dp[1] = 2

接下来我们就取dp最大值,即最长的整除子集长度,再根据记录的前面数的位置找出所有的数字

code:
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int len=nums.length;
        if(len==0)
            return new ArrayList<Integer>();
        Arrays.sort(nums);
        int[] dp=new int[len];
        int[] pre=new int[len];
        dp[0]=1;
        pre[0]=-1;
        int temp=0;
        int max=1;
        int maxlogo=0;
        for(int i=1;i<len;i++)
        {
            dp[i]=1;
            pre[i]=-1;
            for(int t=0;t<i;t++)
            {
                if(nums[i]%nums[t]==0)
                {
                    temp=dp[t]+1;
                    if(temp>dp[i])
                    {
                        dp[i]=temp;
                        pre[i]=t;
                    }
                }
            }
            if(dp[i]>max)
            {
                max=dp[i];
                maxlogo=i;
            }
        }
        List<Integer> list=new ArrayList<Integer>();
        while(maxlogo>-1)
        {
            list.add(nums[maxlogo]);
            maxlogo=pre[maxlogo];
        }
        return list;
    }
}
