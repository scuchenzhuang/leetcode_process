给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。
这道题最重要的是复杂度，还有个应该取哪个地方的问题。所以以n+1为设定各种计算，具体参看链接https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/4-xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-shu/
为了解决这个问题，我们需要理解 “中位数的作用是什么”。在统计中，中位数被用来：

将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素。

这其中又分为偶数组和奇数组：

奇数组: [2 3 5] 对应的中位数为3

偶数组: [1 4 7 9] 对应的中位数为 (4 + 7) /2 = 5.5

先解释下“割”

我们通过切一刀，能够把有序数组分成左右两个部分，切的那一刀就被称为割(Cut)，割(Cut)的左右会有两个元素，分别是左边最大值和右边最小值。

我们定义LMax= Max(LeftPart)，RMin = Min(RightPart)。

割可以割在两个数中间，也可以割在1个数上，如果割在一个数上，那么这个数即属于左边，也属于右边

奇数组: [2 3 5] 对应的中位数为3，假定割(Cut)在3上，我们可以把3分为2个： [2 （3/3) 5]

因此LMax=3, RMin=3

偶数组: [1 4 7 9] 对应的中位数为 (4 + 7) /2 = 5.5,假定割(Cut)在4和7之间： [1 （4/7) 9]

因此LMax=4, RMin=7

割和第k个元素
一个数组

对于一个有序数组，对于数组A,如果在k的位置割(Cut)一下（不是割(Cut)在两数中间），那么 LMax = RMin = A[k],

两个数组
也就是我们题目的状态，我们要求得两个数组合并成一个有序数组时，第k位的元素

我们设:
Ci为第i个数组的割。

LMaxi为第i个数组割后的左元素.

RMini为第i个数组割后的右元素。




示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n=nums1.length;
        int m=nums2.length;
        if(n>m)
            return findMedianSortedArrays(nums2, nums1);//始终保证
        int lmax1=0,lmax2=0,rmin1=0,rmin2=0,c1,c2,left=0,right=2*n;
        
        while(left<=right)
        {
            c1=left+(right-left)/2;
            c2=m+n-c1;
            lmax1=(c1==0)?Integer.MIN_VALUE:nums1[(c1-1)/2];
            rmin1=(c1==2*n)?Integer.MAX_VALUE:nums1[(c1)/2];
            lmax2=(c2==0)?Integer.MIN_VALUE:nums2[(c2-1)/2];
            rmin2=(c2==2*m)?Integer.MAX_VALUE:nums2[(c2)/2];
            
            if(rmin1<lmax2)
                left=c1+1;
            else if(rmin2<lmax1)
                right=c1-1;
            else break;
                

        }
        return (Math.max(lmax1,lmax2)+Math.min(rmin1,rmin2))/2.0;
        
    
    }
}
