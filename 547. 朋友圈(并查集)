班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。所谓的朋友圈，是指所有朋友的集合。

给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。

示例 1:

输入: 
[[1,1,0],
 [1,1,0],
 [0,0,1]]
输出: 2 
说明：已知学生0和学生1互为朋友，他们在一个朋友圈。
第2个学生自己在一个朋友圈。所以返回2。
示例 2:

输入: 
[[1,1,0],
 [1,1,1],
 [0,1,1]]
输出: 1
说明：已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。
注意：

N 在[1,200]的范围内。
对于所有学生，有M[i][i] = 1。
如果有M[i][j] = 1，则有M[j][i] = 1。

此处学到并查集(union-find algorithm)的要点，当然讲的是合并路径后的并查集
要点：
public int getroot(int a)
{
if(a!=parent[a])
parent[a]=getroot(parent[a]);
return parent[a]; // 此处的含义就是找到自己的根部，如果自己不是根(a!=parent[a])那么无限循环上去寻找根部
}

public void merge(int a,int b)
{
parent[getroot(b)]=getroot(a);//把b根的所有部分，放在a的根部的下方
}
public boolean query(int a,int b)
{return getroot(a)==getroot(b);//判断a和b的根部是否相同
}

代码如下：
class Solution {
    int[] parent;
    public int findCircleNum(int[][] M) {
        int hang=M.length;
        if(hang<=0)
            return 0;
        int lie=M[0].length;
        parent=new int[hang];
        for(int i=0;i<hang;i++)
            parent[i]=i;
        for(int i=0;i<hang;i++)
            for(int j=0;j<lie;j++)
            {
                if(M[i][j]==1)
                    merge(i,j);
            }
        int num=0;
        for(int i=0;i<hang;i++)
        {
            if(GetRoot(i)==i)
                num++;
        }
        return num;
    }
    public void merge(int i,int j)
    {
        if(i==j)
            return;
        int big=Math.max(i,j);
        int small=Math.min(i,j);
        parent[GetRoot(big)]=GetRoot(small);
        return;
    }
    public int GetRoot(int a)
    {
        if(a!=parent[a])
            parent[a]=GetRoot(parent[a]);
        return parent[a];
    }
}




