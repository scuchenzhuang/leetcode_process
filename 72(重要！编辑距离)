给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。

你可以对一个单词进行如下三种操作：

插入一个字符
删除一个字符
替换一个字符
示例 1:

输入: word1 = "horse", word2 = "ros"
输出: 3
解释: 
horse -> rorse (将 'h' 替换为 'r')
rorse -> rose (删除 'r')
rose -> ros (删除 'e')
示例 2:

输入: word1 = "intention", word2 = "execution"
输出: 5
解释: 
intention -> inention (删除 't')
inention -> enention (将 'i' 替换为 'e')
enention -> exention (将 'n' 替换为 'x')
exention -> exection (将 'n' 替换为 'c')
exection -> execution (插入 'u')

class Solution {
    public int minDistance(String word1, String word2) {
        int m=word1.length();
        int n=word2.length();
        int[][] dp=new int[m+1][n+1];
        for(int i=0;i<=m;i++)
            dp[i][0]=i;//base case 指word2没有字符了匹配完了，只剩word1，直接删除word1的字符串
        for(int i=0;i<=n;i++)
            dp[0][i]=i;
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++) 
        {
            if(word1.charAt(i-1)==word2.charAt(j-1))
                dp[i][j]=dp[i-1][j-1];//字符相同，向前匹配
            else
            {
                dp[i][j]=Math.min(dp[i-1][j],Math.min(dp[i][j-1],dp[i-1][j-1]))+1;//分别是删除，插入，替换。每次采取动态措施，都会使操作数增加1
            }
        }
        }
        return dp[m][n];
            /*本道题的重要是利用匹配字符串的方法，利用dp解决。 比如替换一个字符，word1替换后，i会向前移动，同时j也会。而删除，i会向前移动，而j不会。 而插入，则相反
            总而言之此题变为：字符相同，往前匹配。字符不同，3种选择*/
}
   // public int min(int a,int b,int c)
    //{
      //  return Math.min(a,Math.min(b,c));
    //}
}
