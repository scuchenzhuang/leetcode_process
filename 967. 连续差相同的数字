返回所有长度为 N 且满足其每两个连续位上的数字之间的差的绝对值为 K 的非负整数。

请注意，除了数字 0 本身之外，答案中的每个数字都不能有前导零。例如，01 因为有一个前导零，所以是无效的；但 0 是有效的。

你可以按任何顺序返回答案。

 

示例 1：

输入：N = 3, K = 7
输出：[181,292,707,818,929]
解释：注意，070 不是一个有效的数字，因为它有前导零。
示例 2：

输入：N = 2, K = 1
输出：[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
 

提示：

1 <= N <= 9
0 <= K <= 9

代码：
class Solution {
    ArrayList<Integer> a = new ArrayList<Integer>();
    public int[] numsSameConsecDiff(int N, int K) {
     int ans=0;
         if(N==1)
        {
            int[] res=new int[10];
             for(int i=0;i<10;i++)
                 res[i]=i;
             return res;
        }
        for(int i=1;i<=9;i++)
        {
            ans=i;
            solve(ans,K,i,N-1);
        }

        int[] res=new int[a.size()];
        for(int i=0;i<a.size();i++)
            res[i]=a.get(i);
        
        return res;
    }
    public void solve(int ans,int K,int last,int N)
    {
        int temp;
        if(N==0)
        {a.add(ans);
         return;}
        if(last-K<=9&&last-K>=0)
        {
            temp=ans;
            temp=temp*10-K+last;
            solve(temp,K,last-K,N-1);
        }
         if(last+K>=0&&last+K<=9&&K!=0)
        {
            temp=ans;
            temp=temp*10+K+last;
            solve(temp,K,last+K,N-1);
        }
        return;
    }
}

收获
1.ArrayList<Integer> list = new ArrayList<Integer>();//list是集合，好处是不限制大小，可以根据情况动态添加
比起数组更加灵活
2int[] res=new int[a.size()];
        for(int i=0;i<a.size();i++)
            res[i]=a.get(i);这串代码就是将list转化为某一个数组，比起用list的toarray函数来说，更加方便记忆
