实现 pow(x, n) ，即计算 x 的 n 次幂函数。

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
说明:
/
-100.0 < x< 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。

快速幂其实就是把幂分成二进制的数，然后每次乘以base，base^2,base^4,base^8
class Solution {
    public double myPow(double x, int n) {
        int flag=0;
        long N=n;//注意到此处用的是long，因为之后会把n转化为正数，而-2147483648在负数可以，在正数2147483648就会超界，导致超时所以此处这样做
        /*if(n==-2147483648)
        {
            n=-2147483646;
        }*/
        
        if(N<0)
        {
            flag=1;
            N=0-N;
        }
        double base=x,result=1,y=0;//base作为基底每次x base
        int a;
        while(N!=0)
        {
            if((1&N)!=0)//如果1和N与为1则说明，此时第一位的数字为1.注意一下，&的优先级不高，会先执行(N!=0)。为避免此处情况就得括号
                result=result*base;
            N=N>>1;//向右移动一位
            base=base*base;
        }
        if(flag==0)
            return result;
        else
            return 1/result;
    }
}
