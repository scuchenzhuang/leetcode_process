先序遍历：根左右 类似于层次遍历
中序遍历：左根右 平常我们习惯的数学计算公式如2+3
后序遍历：左右根 类似于计算机计算时用的表达式


那么这道题我们的想法是设置一个hashmap来表示此时这个树的根节点是否被遍历过了
如果第一次搜索到这个节点，那么设置为false，指定刚被碰到第一次，没有被碰触第二次不需要输出
如果第二次搜索到这个节点入栈时，说明已经有可能需要输出它了
另外，第三次遍历到此节点时，就把这个节点补充到list里面作为我们需要使用的链输出
另外，设定一个栈a记录需要输出的顺序，先进后出，比如先序遍历，我们就按照右左根这样入栈。（输出的时候就是根左右）


给定一个二叉树，返回它的中序 遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
进阶: 递归算法很简单，你可以通过迭代算法完成吗？
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
    if(root==null)
    return new ArrayList<Integer>();
    Stack<TreeNode> a=new Stack<TreeNode>();
    List<Integer> list=new ArrayList<Integer>();
    HashMap<TreeNode,Boolean> map=new HashMap<TreeNode,Boolean>();
    a.push(root);
    map.put(root,false);
    while(!a.isEmpty())
    {
    TreeNode tmp=a.pop();
    if(!map.get(tmp))//目前只被遍历过一次，无需输出时
    {
    if(tmp.right!=null)
    {   
        map.put(tmp.right,false);
        a.push(tmp.right);
    
    }
    map.put(tmp,true);
    a.push(tmp);
     if(tmp.left!=null)
    {   
        map.put(tmp.left,false);
        a.push(tmp.left);
    
    }
    }
    else 
    list.add(tmp.val);
    
    
    }
    return list;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}}

